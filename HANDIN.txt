Student Name #1: TODO:
Student ugrad login #1: TODO:

Student Name #2: TODO:
Student ugrad login #2: TODO:

Team name (for fun!): TODO:

Acknowledgment that you understand and have followed the course's
collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct):

TODO: [[Put your names here again as a signature]]

TODO: submit using: make handin-proj1

----------------------------------------------------------------------

Approximate hours on project: TODO:

----------------------------------------------------------------------

For teams, rough breakdown of work: TODO:

----------------------------------------------------------------------

Acknowledgment of assistance: TODO:

----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.


1.  Edit solve.cpp to use your queue classes to solve the MazeRunner
puzzle.  Set a large delay in the solvePuzzle function (like 1000000).
Do you see why this is called breadth-first search (BFS)?
How many steps long was your solution?  How does this compare with
your answers to #2 and #3 on your MILESTONE?

TODO:

2.  Try to solve the blank Sudoku board using your ArrayQueue
and LinkedListQueue classes.  What happens?

TODO:

3.  Switch to the medium-difficulty Sudoku problem, and comment
out the delay and the print statements in the solvePuzzle function.
How long does it take to solve the puzzle using your ArrayQueue
class?  Using your LinkedListQueue class?  Is the difference big?

TODO:

4.  Edit solve.cpp to switch to the 4x4 slider puzzle.  Make sure
to comment out the delay and print statements in the solvePuzzle function.
How long does it take to solve this problem with your HeapPriorityQueue
versus my VectorPriorityQueue?  Why is mine faster?  Are the asymptotic
runtimes for the heap versus the vector wrong?

TODO:

----------------------------------------------------------------------

We will be checking your implementations of ArrayQueue, LinkedListQueue,
and HeapPriorityQueue.
